% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/readAlleleCounts.R
\name{readAlleleCounts}
\alias{readAlleleCounts}
\title{Reading in allele quantification data into SingleCellAlleleExperiment object}
\usage{
readAlleleCounts(
  samples,
  sample_names = names(samples),
  filter = c("yes", "no", "custom"),
  exp_type = c("WTA", "Amplicon"),
  symbols = NULL,
  lookup_file = "lookup_table_HLA_only.csv",
  barcode_file = "cells_x_genes.barcodes.txt",
  gene_file = "cells_x_genes.genes.txt",
  matrix_file = "cells_x_genes.mtx",
  tag_feature_mtx = "cells_x_features.mtx",
  tag_feature_barcodes = "cells_x_features.barcodes.txt",
  filter_threshold = NULL,
  verbose = FALSE,
  BPPARAM = BiocParallel::SerialParam()
)
}
\arguments{
\item{samples}{character string input containing the path to the directory containing the input files}

\item{sample_names}{character string for a sample_name identifier}

\item{filter}{character string determining the filter mode. \code{yes} uses the inflection point of the knee plot. \code{no} computes the knee plot and stops funciton execution. \code{custom} allows for setting a custom threshold in \code{filter_threshold}.}

\item{exp_type}{either \code{WTA} or \code{Amplicon} depending on the used experiments technology}

\item{symbols}{identifier used to choose which database-function to use for retrieving the ncbi gene names}

\item{lookup_file}{character string determining the name of the lookup table file}

\item{barcode_file}{character string determining the name of the file containing the barcode identifiers}

\item{gene_file}{character string determining the name of the file containing the feature identifiers}

\item{matrix_file}{character string determining the name of the file containing the count matrix}

\item{tag_feature_mtx}{character string determining the name of the file containing the count matrix of sample tag information}

\item{tag_feature_barcodes}{character string determining the name of the file containing the barcode identifiers of sample tag information}

\item{filter_threshold}{NULL or integer value > 0 used for \code{custom} filtering if \code{filter = "custom"}}

\item{verbose}{FALSE if no info message for runtime should be shown (default), TRUE for runtime information about each step}

\item{BPPARAM}{A BiocParallelParam object specifying how loading should be parallelized for multiple samples}
}
\value{
SingleCellAlleleExperiment object
}
\description{
Main read in function for reading in given allele quantification data and
loading the data into an \code{SingleCellAlleleExperiment} object. Input data are stored in a shared folder.
Expected naming scheme of the files from the data generating method:
\itemize{
\item quantification matrix: \code{cells_x_genes.mtx}
\item barcode information: \code{cells_x_genes.barcodes.txt}
\item feature information: \code{cells_x_genes.genes.txt}
\item allele lookup table: \code{lookup_table_HLA_only}
}

File identifiers can be specifically stated if the identifiers are different.
}
\examples{
library(SingleCellAlleleExperiment)

example_data <- system.file("extdata", package = "SingleCellAlleleExperiment")


# preflight mode, not generating an SCAE object
# used for quality-assessment by plotting the knee plot
scae_preflight <- readAlleleCounts(example_data,
                        sample_names = "example_data",
                        filter = "no",
                        symbols = "orgdb",
                        exp_type = "WTA",
                        lookup_file = "lookup_table_HLA_only.csv",
                        barcode_file = "cells_x_genes.barcodes.txt",
                        gene_file = "cells_x_genes.genes.txt",
                        matrix_file = "cells_x_genes.mtx",
                        tag_feature_mtx = "cells_x_genes.genes.txt",
                        tag_feature_barcodes = "cells_x_genes.barcodes.txt",
                        filter_threshold = NULL
                        )


# automatic filtering mode, filtering out low-quality cells on the inflection point of the knee plot
scae_filtered <- readAlleleCounts(example_data,
                        sample_names = "example_data",
                        filter = "yes",
                        symbols = "orgdb",
                        exp_type = "WTA",
                        lookup_file = "lookup_table_HLA_only.csv",
                        barcode_file = "cells_x_genes.barcodes.txt",
                        gene_file = "cells_x_genes.genes.txt",
                        matrix_file = "cells_x_genes.mtx",
                        tag_feature_mtx = "cells_x_genes.genes.txt",
                        tag_feature_barcodes = "cells_x_genes.barcodes.txt",
                        filter_threshold = NULL,
                        verbose = TRUE
                        )

scae_filtered


# custom filtering mode, setting up a custom filter threshold for filtering out
# low-quality cells (e.g. after using the preflight mode and assessing the knee plot)
scae_custom_filter <- readAlleleCounts(example_data,
                        sample_names = "example_data",
                        filter = "custom",
                        symbols = "orgdb",
                        exp_type = "WTA",
                        lookup_file = "lookup_table_HLA_only.csv",
                        barcode_file = "cells_x_genes.barcodes.txt",
                        gene_file = "cells_x_genes.genes.txt",
                        matrix_file = "cells_x_genes.mtx",
                        tag_feature_mtx = "cells_x_genes.genes.txt",
                        tag_feature_barcodes = "cells_x_genes.barcodes.txt",
                        filter_threshold = 105
                        )

scae_custom_filter



}
