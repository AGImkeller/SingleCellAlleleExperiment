% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/readAlleleCounts.R
\name{read_allele_counts}
\alias{read_allele_counts}
\title{Reading in allele quantification data into SingleCellAlleleExperiment object}
\usage{
read_allele_counts(
  samples_dir,
  sample_names = names(samples_dir),
  filter = c("yes", "no", "custom"),
  exp_type = c("WTA", "Amplicon"),
  lookup_file = "lookup_table_HLA_only.csv",
  barcode_file = "cells_x_genes.barcodes.txt",
  gene_file = "cells_x_genes.genes.txt",
  matrix_file = "cells_x_genes.mtx",
  tag_feature_mtx = "cells_x_features.mtx",
  tag_feature_barcodes = "cells_x_features.barcodes.txt",
  filter_threshold = NULL,
  verbose = FALSE,
  BPPARAM = BiocParallel::SerialParam()
)
}
\arguments{
\item{samples_dir}{A character string determining the path to one directory containing all input files.}

\item{sample_names}{A character string for a sample identifier. Can be used to describe the used dataset or sample.}

\item{filter}{A vector containing three character strings that describe different options for filtering. The value \code{"yes"} uses the inflection point of the knee plot to filter out low-quality cells.
The value \code{"no"} computes the knee plot and stops funciton execution. This mode serves as a preflight mode to observe the knee plot before filtering. The value \code{"custom"} allows for setting a custom threshold in the \code{filter_threshold} parameter.}

\item{exp_type}{A vector containing two character strings. Either \code{"WTA"} or \code{"Amplicon"} are valid inputs. Choose one depending on the used transcriptomics approach.}

\item{lookup_file}{A character string determining the name of the lookup table file.}

\item{barcode_file}{A character string determining the name of the file containing the barcode identifiers.}

\item{gene_file}{A character string determining the name of the file containing the feature identifiers.}

\item{matrix_file}{A character string determining the name of the file containing the count matrix.}

\item{tag_feature_mtx}{A character string determining the name of the file containing the sample-tag quantification data.}

\item{tag_feature_barcodes}{A character string determining the name of the file containing the sample-tag barcode identifiers.}

\item{filter_threshold}{An integer value used as a threshold for filtering low-quality barcodes/cells. Standard value is \code{NULL} when using \code{filter = c("yes", "no")}. Value must be provided when using \code{filter = "custom"}.}

\item{verbose}{A logical parameter to decide if runtime-messages should be shown during function execution.
Use \code{FALSE} if no info runtime-messages should be shown (default), and \code{TRUE} for showing runtime-messages.}

\item{BPPARAM}{A BiocParallelParam object specifying how loading should be parallelized for multiple samples.}
}
\value{
A SingleCellAlleleExperiment object.
}
\description{
Main read in function for reading in given allele quantification data and
loading the data into an \code{SingleCellAlleleExperiment} object. Input data are stored in a shared folder.
Expected naming scheme of the files from the data generating method:
\itemize{
\item quantification matrix: \code{cells_x_genes.mtx}
\item barcode information: \code{cells_x_genes.barcodes.txt}
\item feature information: \code{cells_x_genes.genes.txt}
\item allele lookup table: \code{lookup_table_HLA_only}
}

File identifiers can be specifically stated if the identifiers are different.
}
\examples{

example_data <- system.file("extdata", package = "SingleCellAlleleExperiment")


# preflight mode, not generating an SCAE object
# used for quality-assessment by plotting the knee plot
scae_preflight <- read_allele_counts(example_data,
                        sample_names = "example_data",
                        filter = "no",
                        exp_type = "WTA",
                        lookup_file = "lookup_table_HLA_only.csv",
                        barcode_file = "cells_x_genes.barcodes.txt",
                        gene_file = "cells_x_genes.genes.txt",
                        matrix_file = "cells_x_genes.mtx",
                        tag_feature_mtx = "cells_x_genes.genes.txt",
                        tag_feature_barcodes = "cells_x_genes.barcodes.txt",
                        filter_threshold = NULL
                        )


# automatic filtering mode, filtering out low-quality cells on the inflection point of the knee plot
scae_filtered <- read_allele_counts(example_data,
                        sample_names = "example_data",
                        filter = "yes",
                        exp_type = "WTA",
                        lookup_file = "lookup_table_HLA_only.csv",
                        barcode_file = "cells_x_genes.barcodes.txt",
                        gene_file = "cells_x_genes.genes.txt",
                        matrix_file = "cells_x_genes.mtx",
                        tag_feature_mtx = "cells_x_genes.genes.txt",
                        tag_feature_barcodes = "cells_x_genes.barcodes.txt",
                        filter_threshold = NULL,
                        verbose = TRUE
                        )

scae_filtered


# custom filtering mode, setting up a custom filter threshold for filtering out
# low-quality cells (e.g. after using the preflight mode and assessing the knee plot)
scae_custom_filter <- read_allele_counts(example_data,
                        sample_names = "example_data",
                        filter = "custom",
                        exp_type = "WTA",
                        lookup_file = "lookup_table_HLA_only.csv",
                        barcode_file = "cells_x_genes.barcodes.txt",
                        gene_file = "cells_x_genes.genes.txt",
                        matrix_file = "cells_x_genes.mtx",
                        tag_feature_mtx = "cells_x_genes.genes.txt",
                        tag_feature_barcodes = "cells_x_genes.barcodes.txt",
                        filter_threshold = 105
                        )

scae_custom_filter


}
